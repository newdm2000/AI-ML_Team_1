{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"l09c04_nlp_embeddings_and_sentiment.ipynb의 사본","provenance":[{"file_id":"https://github.com/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l09c04_nlp_embeddings_and_sentiment.ipynb","timestamp":1635938154837}],"collapsed_sections":["punL79CN7Ox6"],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"punL79CN7Ox6"},"source":["##### Copyright 2020 The TensorFlow Authors."]},{"cell_type":"code","metadata":{"id":"_ckMIh7O7s6D"},"source":["#@title Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","# https://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9uBA1i1BbiJn"},"source":["# Word Embeddings and Sentiment"]},{"cell_type":"markdown","metadata":{"id":"S5Uhzt6vVIB2"},"source":["<table class=\"tfo-notebook-buttons\" align=\"left\">\n","  <td>\n","    <a target=\"_blank\" href=\"https://colab.research.google.com/github/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l09c04_nlp_embeddings_and_sentiment.ipynb\"><img src=\"https://www.tensorflow.org/images/colab_logo_32px.png\" />Run in Google Colab</a>\n","  </td>\n","  <td>\n","    <a target=\"_blank\" href=\"https://github.com/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l09c04_nlp_embeddings_and_sentiment.ipynb\"><img src=\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\" />View source on GitHub</a>\n","  </td>\n","</table>"]},{"cell_type":"markdown","metadata":{"id":"1iLe4E0dB7tj"},"source":["In this colab, you'll work with word embeddings and train a basic neural network to predict text sentiment. At the end, you'll be able to visualize how the network sees the related sentiment of each word in the dataset."]},{"cell_type":"markdown","metadata":{"id":"wqvz1jVgbwIN"},"source":["## Import TensorFlow and related functions"]},{"cell_type":"code","metadata":{"id":"XIG52aKPdpux","executionInfo":{"status":"ok","timestamp":1635938193874,"user_tz":-540,"elapsed":1998,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}}},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pazU5OmxehIA"},"source":["## Get the dataset\n","\n","We're going to use a dataset containing Amazon and Yelp reviews, with their related sentiment (1 for positive, 0 for negative). This dataset was originally extracted from [here](https://www.kaggle.com/marklvl/sentiment-labelled-sentences-data-set)."]},{"cell_type":"code","metadata":{"id":"qpwQT2E9ez5B","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635938203483,"user_tz":-540,"elapsed":1440,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"07a82203-e7ae-4501-9c0f-d15cac1181f7"},"source":["!wget --no-check-certificate \\\n","    -O /tmp/sentiment.csv https://drive.google.com/uc?id=13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["--2021-11-03 11:16:41--  https://drive.google.com/uc?id=13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P\n","Resolving drive.google.com (drive.google.com)... 108.177.125.100, 108.177.125.101, 108.177.125.102, ...\n","Connecting to drive.google.com (drive.google.com)|108.177.125.100|:443... connected.\n","HTTP request sent, awaiting response... 302 Moved Temporarily\n","Location: https://doc-08-ak-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/rvn6jcn49gsasfmgerehrsph051j90gq/1635938175000/11118900490791463723/*/13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P [following]\n","Warning: wildcards not supported in HTTP.\n","--2021-11-03 11:16:42--  https://doc-08-ak-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/rvn6jcn49gsasfmgerehrsph051j90gq/1635938175000/11118900490791463723/*/13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P\n","Resolving doc-08-ak-docs.googleusercontent.com (doc-08-ak-docs.googleusercontent.com)... 108.177.97.132, 2404:6800:4008:c00::84\n","Connecting to doc-08-ak-docs.googleusercontent.com (doc-08-ak-docs.googleusercontent.com)|108.177.97.132|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 127831 (125K) [text/csv]\n","Saving to: ‘/tmp/sentiment.csv’\n","\n","/tmp/sentiment.csv  100%[===================>] 124.83K  --.-KB/s    in 0.002s  \n","\n","2021-11-03 11:16:42 (78.8 MB/s) - ‘/tmp/sentiment.csv’ saved [127831/127831]\n","\n"]}]},{"cell_type":"code","metadata":{"id":"6Zvp9NScfMnw","executionInfo":{"status":"ok","timestamp":1635938211225,"user_tz":-540,"elapsed":464,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}}},"source":["import numpy as np\n","import pandas as pd\n","\n","dataset = pd.read_csv('/tmp/sentiment.csv')\n","\n","sentences = dataset['text'].tolist()\n","labels = dataset['sentiment'].tolist()\n","\n","# Separate out the sentences and labels into training and test sets\n","training_size = int(len(sentences) * 0.8)\n","\n","training_sentences = sentences[0:training_size]\n","testing_sentences = sentences[training_size:]\n","training_labels = labels[0:training_size]\n","testing_labels = labels[training_size:]\n","\n","# Make labels into numpy arrays for use with the network later\n","training_labels_final = np.array(training_labels)\n","testing_labels_final = np.array(testing_labels)"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NHpvqaSigcST"},"source":["## Tokenize the dataset\n","\n","Tokenize the dataset, including padding and OOV"]},{"cell_type":"code","metadata":{"id":"78icewYRgfxh","executionInfo":{"status":"ok","timestamp":1635938485490,"user_tz":-540,"elapsed":806,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}}},"source":["vocab_size = 1000\n","embedding_dim = 16\n","max_length = 100\n","trunc_type='post'\n","padding_type='post'\n","oov_tok = \"<OOV>\"\n","\n","\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","tokenizer = Tokenizer(num_words = vocab_size, oov_token=oov_tok) # num_words 수만큼 단어사전 저장(빈도가 높은 순으로)\n","tokenizer.fit_on_texts(training_sentences)\n","word_index = tokenizer.word_index\n","sequences = tokenizer.texts_to_sequences(training_sentences)\n","padded = pad_sequences(sequences,maxlen=max_length, padding=padding_type,  # max_length : 한 문장에 들어있는 단어의 수\n","                       truncating=trunc_type)\n","\n","testing_sequences = tokenizer.texts_to_sequences(testing_sentences)\n","testing_padded = pad_sequences(testing_sequences,maxlen=max_length, \n","                               padding=padding_type, truncating=trunc_type)"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"q4yIEk_8kszh"},"source":["## Review a Sequence\n","\n","Let's quickly take a look at one of the padded sequences to ensure everything above worked appropriately."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RstVZUZujwLD","executionInfo":{"status":"ok","timestamp":1635939013478,"user_tz":-540,"elapsed":631,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"0838db89-f798-453c-f6ee-cd1b81da9164"},"source":["padded[1]"],"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 20,  90,  76, 364,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n","         0,   0,   0,   0,   0,   0,   0,   0,   0], dtype=int32)"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","metadata":{"id":"JTU3FmVGk100","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635939092810,"user_tz":-540,"elapsed":417,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"26f9252e-f64c-4878-fc4f-113062d53286"},"source":["reverse_word_index = dict([(value, key) for (key, value) in word_index.items()]) # word_index : {'<OOV>': 1, 'the': 2, 'and': 3, 'i': 4, 'it': 5, ...}\n","                                                                                 # reverse_word_index : {1:'<OOV>' ...}\n","def decode_review(text):\n","    return ' '.join([reverse_word_index.get(i, '?') for i in text]) # get(i, '?') 딕셔너리 키들중 i 값이 있으면 맞는 value 출력 없으면 '?' 출력\n","                                                                     \n","print(decode_review(padded[1]))  # ?는 padding으로부터 나옴\n","print(training_sentences[1])"],"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["good case excellent value ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?\n","Good case Excellent value.\n"]}]},{"cell_type":"markdown","metadata":{"id":"RI91liJnlA92"},"source":["## Train a Basic Sentiment Model with Embeddings"]},{"cell_type":"code","metadata":{"id":"bBMgzp-_lMTp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635938811962,"user_tz":-540,"elapsed":5943,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"425da032-2485-4110-c165-c5c97383facb"},"source":["# Build a basic sentiment network\n","# Note the embedding layer is first, \n","# and the output is only 1 node as it is either 0 or 1 (negative or positive)\n","model = tf.keras.Sequential([\n","    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n","    tf.keras.layers.Flatten(),\n","    tf.keras.layers.Dense(6, activation='relu'),\n","    tf.keras.layers.Dense(1, activation='sigmoid')\n","])\n","model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n","model.summary()"],"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 100, 16)           16000     \n","_________________________________________________________________\n","flatten (Flatten)            (None, 1600)              0         \n","_________________________________________________________________\n","dense (Dense)                (None, 6)                 9606      \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 1)                 7         \n","=================================================================\n","Total params: 25,613\n","Trainable params: 25,613\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"id":"Pfl1W-zVldpn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635938818713,"user_tz":-540,"elapsed":6757,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"6b9d1527-0dfc-458e-9a84-67ed0a4395f8"},"source":["num_epochs = 10\n","model.fit(padded, training_labels_final, epochs=num_epochs, validation_data=(testing_padded, testing_labels_final))"],"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","50/50 [==============================] - 4s 10ms/step - loss: 0.6932 - accuracy: 0.5022 - val_loss: 0.6940 - val_accuracy: 0.4110\n","Epoch 2/10\n","50/50 [==============================] - 0s 6ms/step - loss: 0.6929 - accuracy: 0.5229 - val_loss: 0.6949 - val_accuracy: 0.4110\n","Epoch 3/10\n","50/50 [==============================] - 0s 5ms/step - loss: 0.6927 - accuracy: 0.5229 - val_loss: 0.6957 - val_accuracy: 0.4110\n","Epoch 4/10\n","50/50 [==============================] - 0s 6ms/step - loss: 0.6926 - accuracy: 0.5229 - val_loss: 0.6966 - val_accuracy: 0.4110\n","Epoch 5/10\n","50/50 [==============================] - 0s 6ms/step - loss: 0.6924 - accuracy: 0.5229 - val_loss: 0.6970 - val_accuracy: 0.4110\n","Epoch 6/10\n","50/50 [==============================] - 0s 5ms/step - loss: 0.6924 - accuracy: 0.5229 - val_loss: 0.6976 - val_accuracy: 0.4110\n","Epoch 7/10\n","50/50 [==============================] - 0s 6ms/step - loss: 0.6923 - accuracy: 0.5229 - val_loss: 0.6983 - val_accuracy: 0.4110\n","Epoch 8/10\n","50/50 [==============================] - 0s 5ms/step - loss: 0.6922 - accuracy: 0.5229 - val_loss: 0.6986 - val_accuracy: 0.4110\n","Epoch 9/10\n","50/50 [==============================] - 0s 6ms/step - loss: 0.6923 - accuracy: 0.5066 - val_loss: 0.6948 - val_accuracy: 0.4135\n","Epoch 10/10\n","50/50 [==============================] - 0s 6ms/step - loss: 0.6839 - accuracy: 0.6208 - val_loss: 0.6635 - val_accuracy: 0.6767\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f5e20571490>"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"GjMZ4ZFQl_48"},"source":["## Get files for visualizing the network\n","\n","The code below will download two files for visualizing how your network \"sees\" the sentiment related to each word. Head to http://projector.tensorflow.org/ and load these files, then click the \"Sphereize\" checkbox."]},{"cell_type":"code","metadata":{"id":"S2lB46FirAVx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635938818714,"user_tz":-540,"elapsed":16,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"ea6f2cf3-5192-470d-9345-68b7bed4d3ae"},"source":["# First get the weights of the embedding layer\n","e = model.layers[0]\n","weights = e.get_weights()[0]\n","print(weights.shape) # shape: (vocab_size, embedding_dim)"],"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["(1000, 16)\n"]}]},{"cell_type":"code","metadata":{"id":"Xcha0oGemHX2","executionInfo":{"status":"ok","timestamp":1635938818715,"user_tz":-540,"elapsed":14,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}}},"source":["import io\n","\n","# Write out the embedding vectors and metadata\n","out_v = io.open('vecs.tsv', 'w', encoding='utf-8')\n","out_m = io.open('meta.tsv', 'w', encoding='utf-8')\n","for word_num in range(1, vocab_size):\n","  word = reverse_word_index[word_num]\n","  embeddings = weights[word_num]\n","  out_m.write(word + \"\\n\")\n","  out_v.write('\\t'.join([str(x) for x in embeddings]) + \"\\n\")\n","out_v.close()\n","out_m.close()"],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"id":"g-Q6ALywmWVz","colab":{"base_uri":"https://localhost:8080/","height":17},"executionInfo":{"status":"ok","timestamp":1635938818717,"user_tz":-540,"elapsed":16,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"1ec393fa-fe6e-4884-fe09-6f28dd81b084"},"source":["# Download the files\n","try:\n","  from google.colab import files\n","except ImportError:\n","  pass\n","else:\n","  files.download('vecs.tsv')\n","  files.download('meta.tsv')"],"execution_count":20,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_b6f512b3-a41d-40b9-869f-e32dc92afc09\", \"vecs.tsv\", 196054)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_22b9bceb-2996-4441-b257-f16cc65eb153\", \"meta.tsv\", 6617)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"GNoxfY-i3Ir1"},"source":["## Predicting Sentiment in New Reviews\n","\n","Now that you've trained and visualized your network, take a look below at how we can predict sentiment in new reviews the network has never seen before."]},{"cell_type":"code","metadata":{"id":"QXtfw-OY3WoZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635938818718,"user_tz":-540,"elapsed":15,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"f728adcd-2744-4669-ac90-e7ce4805592e"},"source":["# Use the model to predict a review   \n","fake_reviews = ['I love this phone', 'I hate spaghetti', \n","                'Everything was cold',\n","                'Everything was hot exactly as I wanted', \n","                'Everything was green', \n","                'the host seated us immediately',\n","                'they gave us free chocolate cake', \n","                'not sure about the wilted flowers on the table',\n","                'only works when I stand on tippy toes', \n","                'does not work when I stand on my head']\n","\n","print(fake_reviews) \n","\n","# Create the sequences\n","padding_type='post'\n","sample_sequences = tokenizer.texts_to_sequences(fake_reviews)\n","fakes_padded = pad_sequences(sample_sequences, padding=padding_type, maxlen=max_length)           \n","\n","print('\\nHOT OFF THE PRESS! HERE ARE SOME NEWLY MINTED, ABSOLUTELY GENUINE REVIEWS!\\n')              \n","\n","classes = model.predict(fakes_padded)\n","\n","# The closer the class is to 1, the more positive the review is deemed to be\n","for x in range(len(fake_reviews)):\n","  print(fake_reviews[x])\n","  print(classes[x])\n","  print('\\n')\n","\n","# Try adding reviews of your own\n","# Add some negative words (such as \"not\") to the good reviews and see what happens\n","# For example:\n","# they gave us free chocolate cake and did not charge us"],"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["['I love this phone', 'I hate spaghetti', 'Everything was cold', 'Everything was hot exactly as I wanted', 'Everything was green', 'the host seated us immediately', 'they gave us free chocolate cake', 'not sure about the wilted flowers on the table', 'only works when I stand on tippy toes', 'does not work when I stand on my head']\n","\n","HOT OFF THE PRESS! HERE ARE SOME NEWLY MINTED, ABSOLUTELY GENUINE REVIEWS!\n","\n","I love this phone\n","[0.5107381]\n","\n","\n","I hate spaghetti\n","[0.46019512]\n","\n","\n","Everything was cold\n","[0.49705693]\n","\n","\n","Everything was hot exactly as I wanted\n","[0.503021]\n","\n","\n","Everything was green\n","[0.48418188]\n","\n","\n","the host seated us immediately\n","[0.4779704]\n","\n","\n","they gave us free chocolate cake\n","[0.47584867]\n","\n","\n","not sure about the wilted flowers on the table\n","[0.43557626]\n","\n","\n","only works when I stand on tippy toes\n","[0.46611655]\n","\n","\n","does not work when I stand on my head\n","[0.40562]\n","\n","\n"]}]}]}