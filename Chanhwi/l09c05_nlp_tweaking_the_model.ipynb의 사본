{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"l09c05_nlp_tweaking_the_model.ipynb의 사본","provenance":[{"file_id":"https://github.com/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l09c05_nlp_tweaking_the_model.ipynb","timestamp":1635940036988}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"punL79CN7Ox6"},"source":["##### Copyright 2020 The TensorFlow Authors."]},{"cell_type":"code","metadata":{"cellView":"form","id":"_ckMIh7O7s6D"},"source":["#@title Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","# https://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QrxSyyyhygUR"},"source":["# Tweaking the Model"]},{"cell_type":"markdown","metadata":{"id":"S5Uhzt6vVIB2"},"source":["<table class=\"tfo-notebook-buttons\" align=\"left\">\n","  <td>\n","    <a target=\"_blank\" href=\"https://colab.research.google.com/github/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l09c05_nlp_tweaking_the_model.ipynb\"><img src=\"https://www.tensorflow.org/images/colab_logo_32px.png\" />Run in Google Colab</a>\n","  </td>\n","  <td>\n","    <a target=\"_blank\" href=\"https://github.com/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l09c05_nlp_tweaking_the_model.ipynb\"><img src=\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\" />View source on GitHub</a>\n","  </td>\n","</table>"]},{"cell_type":"markdown","metadata":{"id":"xiWacy71Cu54"},"source":["In this colab, you'll investigate how various tweaks to data processing and the model itself can impact results. At the end, you'll once again be able to visualize how the network sees the related sentiment of each word in the dataset."]},{"cell_type":"markdown","metadata":{"id":"hY-fjvwfy2P9"},"source":["## Import TensorFlow and related functions"]},{"cell_type":"code","metadata":{"id":"drsUfVVXyxJl","executionInfo":{"status":"ok","timestamp":1635940077654,"user_tz":-540,"elapsed":3076,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}}},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZIf1N46jy6Ed"},"source":["## Get the dataset\n","\n","We'll once again use the dataset containing Amazon and Yelp reviews. This dataset was originally extracted from [here](https://www.kaggle.com/marklvl/sentiment-labelled-sentences-data-set)."]},{"cell_type":"code","metadata":{"id":"m83g42sJzGO0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635940121903,"user_tz":-540,"elapsed":1061,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"1f49f7a6-ea62-45b6-f625-873480ceb037"},"source":["!wget --no-check-certificate \\\n","    https://drive.google.com/uc?id=13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P \\\n","    -O /tmp/sentiment.csv"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["--2021-11-03 11:48:40--  https://drive.google.com/uc?id=13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P\n","Resolving drive.google.com (drive.google.com)... 142.250.136.138, 142.250.136.100, 142.250.136.139, ...\n","Connecting to drive.google.com (drive.google.com)|142.250.136.138|:443... connected.\n","HTTP request sent, awaiting response... 302 Moved Temporarily\n","Location: https://doc-08-ak-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/kcl99dcukbcttnnj674ge1t6k4tnd5ir/1635940050000/11118900490791463723/*/13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P [following]\n","Warning: wildcards not supported in HTTP.\n","--2021-11-03 11:48:40--  https://doc-08-ak-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/kcl99dcukbcttnnj674ge1t6k4tnd5ir/1635940050000/11118900490791463723/*/13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P\n","Resolving doc-08-ak-docs.googleusercontent.com (doc-08-ak-docs.googleusercontent.com)... 142.250.152.132, 2607:f8b0:4001:c56::84\n","Connecting to doc-08-ak-docs.googleusercontent.com (doc-08-ak-docs.googleusercontent.com)|142.250.152.132|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 127831 (125K) [text/csv]\n","Saving to: ‘/tmp/sentiment.csv’\n","\n","/tmp/sentiment.csv  100%[===================>] 124.83K  --.-KB/s    in 0.001s  \n","\n","2021-11-03 11:48:41 (83.8 MB/s) - ‘/tmp/sentiment.csv’ saved [127831/127831]\n","\n"]}]},{"cell_type":"code","metadata":{"id":"y4e6GG2CzJUq","executionInfo":{"status":"ok","timestamp":1635940127582,"user_tz":-540,"elapsed":390,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}}},"source":["import numpy as np\n","import pandas as pd\n","\n","dataset = pd.read_csv('/tmp/sentiment.csv')\n","\n","sentences = dataset['text'].tolist()\n","labels = dataset['sentiment'].tolist()\n","\n","# Separate out the sentences and labels into training and test sets\n","training_size = int(len(sentences) * 0.8)\n","\n","training_sentences = sentences[0:training_size]\n","testing_sentences = sentences[training_size:]\n","training_labels = labels[0:training_size]\n","testing_labels = labels[training_size:]\n","\n","# Make labels into numpy arrays for use with the network later\n","training_labels_final = np.array(training_labels)\n","testing_labels_final = np.array(testing_labels)"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"drDkTFMuzW6N"},"source":["## Tokenize the dataset (with tweaks!)\n","\n","Now, we'll tokenize the dataset, but we can make some changes to this from before. Previously, we used: \n","```\n","vocab_size = 1000\n","embedding_dim = 16\n","max_length = 100\n","trunc_type='post'\n","padding_type='post'\n","```\n","\n","How might changing the `vocab_size`, `embedding_dim` or `max_length` affect how the model performs?"]},{"cell_type":"code","metadata":{"id":"hjPUJFhQzuee","executionInfo":{"status":"ok","timestamp":1635940131549,"user_tz":-540,"elapsed":295,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}}},"source":["vocab_size = 500\n","embedding_dim = 16\n","max_length = 50\n","trunc_type='post'\n","padding_type='post'\n","oov_tok = \"<OOV>\"\n","\n","tokenizer = Tokenizer(num_words = vocab_size, oov_token=oov_tok)\n","tokenizer.fit_on_texts(training_sentences)\n","word_index = tokenizer.word_index\n","training_sequences = tokenizer.texts_to_sequences(training_sentences)\n","training_padded = pad_sequences(training_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)\n","\n","testing_sequences = tokenizer.texts_to_sequences(testing_sentences)\n","testing_padded = pad_sequences(testing_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FwFjO1kg0UUK"},"source":["## Train a Sentiment Model (with tweaks!)\n","\n","We'll use a slightly different model here, using `GlobalAveragePooling1D` instead of `Flatten()`."]},{"cell_type":"code","metadata":{"id":"ectP92fl0dFO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635940145088,"user_tz":-540,"elapsed":6000,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"8fddc35d-e155-4405-c4c9-e1dc056052e7"},"source":["model = tf.keras.Sequential([\n","    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n","    tf.keras.layers.GlobalAveragePooling1D(),\n","    tf.keras.layers.Dense(6, activation='relu'),\n","    tf.keras.layers.Dense(1, activation='sigmoid')\n","])\n","model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n","model.summary()"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 50, 16)            8000      \n","_________________________________________________________________\n","global_average_pooling1d (Gl (None, 16)                0         \n","_________________________________________________________________\n","dense (Dense)                (None, 6)                 102       \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 1)                 7         \n","=================================================================\n","Total params: 8,109\n","Trainable params: 8,109\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"id":"7TQIaGjs073w","colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"status":"ok","timestamp":1635940159905,"user_tz":-540,"elapsed":13837,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"65536cc1-613b-4581-a0b4-3c3a0c4e7d07"},"source":["num_epochs = 30\n","history = model.fit(training_padded, training_labels_final, epochs=num_epochs, validation_data=(testing_padded, testing_labels_final))"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","50/50 [==============================] - 4s 10ms/step - loss: 0.6929 - accuracy: 0.5355 - val_loss: 0.6927 - val_accuracy: 0.5188\n","Epoch 2/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6914 - accuracy: 0.5913 - val_loss: 0.6914 - val_accuracy: 0.5689\n","Epoch 3/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.6891 - accuracy: 0.6679 - val_loss: 0.6891 - val_accuracy: 0.6266\n","Epoch 4/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6852 - accuracy: 0.7326 - val_loss: 0.6842 - val_accuracy: 0.7569\n","Epoch 5/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6785 - accuracy: 0.7596 - val_loss: 0.6764 - val_accuracy: 0.7519\n","Epoch 6/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6688 - accuracy: 0.7734 - val_loss: 0.6699 - val_accuracy: 0.6942\n","Epoch 7/30\n","50/50 [==============================] - 0s 8ms/step - loss: 0.6546 - accuracy: 0.7753 - val_loss: 0.6548 - val_accuracy: 0.7619\n","Epoch 8/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6358 - accuracy: 0.7991 - val_loss: 0.6381 - val_accuracy: 0.7694\n","Epoch 9/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6140 - accuracy: 0.8035 - val_loss: 0.6211 - val_accuracy: 0.7895\n","Epoch 10/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.5892 - accuracy: 0.8186 - val_loss: 0.6009 - val_accuracy: 0.7870\n","Epoch 11/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.5616 - accuracy: 0.8293 - val_loss: 0.5846 - val_accuracy: 0.7870\n","Epoch 12/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.5348 - accuracy: 0.8336 - val_loss: 0.5671 - val_accuracy: 0.7794\n","Epoch 13/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.5064 - accuracy: 0.8443 - val_loss: 0.5598 - val_accuracy: 0.7594\n","Epoch 14/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.4802 - accuracy: 0.8500 - val_loss: 0.5380 - val_accuracy: 0.7895\n","Epoch 15/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.4547 - accuracy: 0.8562 - val_loss: 0.5407 - val_accuracy: 0.7419\n","Epoch 16/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.4329 - accuracy: 0.8544 - val_loss: 0.5337 - val_accuracy: 0.7368\n","Epoch 17/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.4095 - accuracy: 0.8632 - val_loss: 0.5561 - val_accuracy: 0.6792\n","Epoch 18/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.3926 - accuracy: 0.8657 - val_loss: 0.5067 - val_accuracy: 0.7594\n","Epoch 19/30\n","50/50 [==============================] - 0s 8ms/step - loss: 0.3741 - accuracy: 0.8669 - val_loss: 0.5006 - val_accuracy: 0.7544\n","Epoch 20/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.3593 - accuracy: 0.8738 - val_loss: 0.4947 - val_accuracy: 0.7644\n","Epoch 21/30\n","50/50 [==============================] - 0s 8ms/step - loss: 0.3440 - accuracy: 0.8757 - val_loss: 0.4884 - val_accuracy: 0.7744\n","Epoch 22/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.3336 - accuracy: 0.8807 - val_loss: 0.4950 - val_accuracy: 0.7544\n","Epoch 23/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.3203 - accuracy: 0.8807 - val_loss: 0.5071 - val_accuracy: 0.7343\n","Epoch 24/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.3108 - accuracy: 0.8895 - val_loss: 0.4849 - val_accuracy: 0.7744\n","Epoch 25/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.3017 - accuracy: 0.8883 - val_loss: 0.4888 - val_accuracy: 0.7619\n","Epoch 26/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2915 - accuracy: 0.8927 - val_loss: 0.5064 - val_accuracy: 0.7318\n","Epoch 27/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.2837 - accuracy: 0.8939 - val_loss: 0.4894 - val_accuracy: 0.7619\n","Epoch 28/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.2760 - accuracy: 0.9014 - val_loss: 0.5125 - val_accuracy: 0.7318\n","Epoch 29/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.2689 - accuracy: 0.8952 - val_loss: 0.5033 - val_accuracy: 0.7393\n","Epoch 30/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2631 - accuracy: 0.9002 - val_loss: 0.4984 - val_accuracy: 0.7569\n"]}]},{"cell_type":"markdown","metadata":{"id":"alAlYort7gWV"},"source":["## Visualize the training graph\n","\n","You can use the code below to visualize the training and validation accuracy while you try out different tweaks to the hyperparameters and model."]},{"cell_type":"code","metadata":{"id":"o9l5vBeU71vH","colab":{"base_uri":"https://localhost:8080/","height":541},"executionInfo":{"status":"ok","timestamp":1635940213728,"user_tz":-540,"elapsed":809,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"c32d454c-c12f-4b0c-e6f9-9ae063011973"},"source":["import matplotlib.pyplot as plt\n","\n","\n","def plot_graphs(history, string):\n","  plt.plot(history.history[string])\n","  plt.plot(history.history['val_'+string])\n","  plt.xlabel(\"Epochs\")\n","  plt.ylabel(string)\n","  plt.legend([string, 'val_'+string])\n","  plt.show()\n","  \n","plot_graphs(history, \"accuracy\")\n","plot_graphs(history, \"loss\")"],"execution_count":7,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"SZzXE-pT8K57"},"source":["## Get files for visualizing the network\n","\n","The code below will download two files for visualizing how your network \"sees\" the sentiment related to each word. Head to http://projector.tensorflow.org/ and load these files, then click the checkbox to \"sphereize\" the data.\n","\n","Note: You may run into errors with the projection if your `vocab_size` earlier was larger than the actual number of words in the vocabulary, in which case you'll need to decrease this variable and re-train in order to visualize."]},{"cell_type":"code","metadata":{"id":"2Ex4o7Lc8Njl"},"source":["# First get the weights of the embedding layer\n","e = model.layers[0]\n","weights = e.get_weights()[0]\n","print(weights.shape) # shape: (vocab_size, embedding_dim)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bUL1zk5p8WIV"},"source":["import io\n","\n","# Create the reverse word index\n","reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])\n","\n","# Write out the embedding vectors and metadata\n","out_v = io.open('vecs.tsv', 'w', encoding='utf-8')\n","out_m = io.open('meta.tsv', 'w', encoding='utf-8')\n","for word_num in range(1, vocab_size):\n","  word = reverse_word_index[word_num]\n","  embeddings = weights[word_num]\n","  out_m.write(word + \"\\n\")\n","  out_v.write('\\t'.join([str(x) for x in embeddings]) + \"\\n\")\n","out_v.close()\n","out_m.close()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lqyV8QYnD46U"},"source":["# Download the files\n","try:\n","  from google.colab import files\n","except ImportError:\n","  pass\n","else:\n","  files.download('vecs.tsv')\n","  files.download('meta.tsv')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XUXAlNNk59gG"},"source":["## Predicting Sentiment in New Reviews\n","\n","Below, we've again included some example new reviews you can test your results on."]},{"cell_type":"code","metadata":{"id":"JbFTTcaK6Dan","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635940219495,"user_tz":-540,"elapsed":272,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"ed4b4276-776c-4862-dd1b-63b85ed0350e"},"source":["# Use the model to predict a review   \n","fake_reviews = ['I love this phone', 'I hate spaghetti', \n","                'Everything was cold',\n","                'Everything was hot exactly as I wanted', \n","                'Everything was green', \n","                'the host seated us immediately',\n","                'they gave us free chocolate cake', \n","                'not sure about the wilted flowers on the table',\n","                'only works when I stand on tippy toes', \n","                'does not work when I stand on my head']\n","\n","print(fake_reviews) \n","\n","# Create the sequences\n","padding_type='post'\n","sample_sequences = tokenizer.texts_to_sequences(fake_reviews)\n","fakes_padded = pad_sequences(sample_sequences, padding=padding_type, maxlen=max_length)           \n","\n","print('\\nHOT OFF THE PRESS! HERE ARE SOME NEWLY MINTED, ABSOLUTELY GENUINE REVIEWS!\\n')              \n","\n","classes = model.predict(fakes_padded)\n","\n","# The closer the class is to 1, the more positive the review is deemed to be\n","for x in range(len(fake_reviews)):\n","  print(fake_reviews[x])\n","  print(classes[x])\n","  print('\\n')\n","\n","# Try adding reviews of your own\n","# Add some negative words (such as \"not\") to the good reviews and see what happens\n","# For example:\n","# they gave us free chocolate cake and did not charge us"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["['I love this phone', 'I hate spaghetti', 'Everything was cold', 'Everything was hot exactly as I wanted', 'Everything was green', 'the host seated us immediately', 'they gave us free chocolate cake', 'not sure about the wilted flowers on the table', 'only works when I stand on tippy toes', 'does not work when I stand on my head']\n","\n","HOT OFF THE PRESS! HERE ARE SOME NEWLY MINTED, ABSOLUTELY GENUINE REVIEWS!\n","\n","I love this phone\n","[0.9021891]\n","\n","\n","I hate spaghetti\n","[0.17509763]\n","\n","\n","Everything was cold\n","[0.5889341]\n","\n","\n","Everything was hot exactly as I wanted\n","[0.42539293]\n","\n","\n","Everything was green\n","[0.5889341]\n","\n","\n","the host seated us immediately\n","[0.5913853]\n","\n","\n","they gave us free chocolate cake\n","[0.84117013]\n","\n","\n","not sure about the wilted flowers on the table\n","[0.10793434]\n","\n","\n","only works when I stand on tippy toes\n","[0.8492421]\n","\n","\n","does not work when I stand on my head\n","[0.02517648]\n","\n","\n"]}]}]}