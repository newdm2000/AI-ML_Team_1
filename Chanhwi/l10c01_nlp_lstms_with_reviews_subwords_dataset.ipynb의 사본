{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"l10c01_nlp_lstms_with_reviews_subwords_dataset.ipynb의 사본","provenance":[{"file_id":"https://github.com/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l10c01_nlp_lstms_with_reviews_subwords_dataset.ipynb","timestamp":1636001202909}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"punL79CN7Ox6"},"source":["##### Copyright 2020 The TensorFlow Authors."]},{"cell_type":"code","metadata":{"cellView":"form","id":"_ckMIh7O7s6D"},"source":["#@title Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","# https://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hAclqSm3OOml"},"source":["# Using LSTMs with the subwords dataset\n"]},{"cell_type":"markdown","metadata":{"id":"S5Uhzt6vVIB2"},"source":["<table class=\"tfo-notebook-buttons\" align=\"left\">\n","  <td>\n","    <a target=\"_blank\" href=\"https://colab.research.google.com/github/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l10c01_nlp_lstms_with_reviews_subwords_dataset.ipynb\"><img src=\"https://www.tensorflow.org/images/colab_logo_32px.png\" />Run in Google Colab</a>\n","  </td>\n","  <td>\n","    <a target=\"_blank\" href=\"https://github.com/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l10c01_nlp_lstms_with_reviews_subwords_dataset.ipynb\"><img src=\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\" />View source on GitHub</a>\n","  </td>\n","</table>"]},{"cell_type":"markdown","metadata":{"id":"KTVx8__oGR9J"},"source":["In this colab, you'll compare the results of using a model with an Embedding layer and then adding bidirectional LSTM layers.\n","\n","You'll work with the dataset of subwords for the combined Yelp and Amazon reviews.\n","\n","You'll use your models to predict the sentiment of new reviews."]},{"cell_type":"code","metadata":{"id":"L62G7LTwNzoD"},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.preprocessing.sequence import pad_sequences"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hLcl0QHvDjTV"},"source":["# Get the dataset\n","\n","Start by getting the dataset containing Amazon and Yelp reviews, with their related sentiment (1 for positive, 0 for negative). This dataset was originally extracted from [here](https://www.kaggle.com/marklvl/sentiment-labelled-sentences-data-set).\n"]},{"cell_type":"code","metadata":{"id":"nCOtiRJZbxCH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636001229148,"user_tz":-540,"elapsed":685,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"0def0319-ead0-47db-f5c7-153e1bd7e250"},"source":["!wget --no-check-certificate \\\n","    https://drive.google.com/uc?id=13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P -O /tmp/sentiment.csv"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--2021-11-04 04:47:07--  https://drive.google.com/uc?id=13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P\n","Resolving drive.google.com (drive.google.com)... 142.250.125.101, 142.250.125.139, 142.250.125.102, ...\n","Connecting to drive.google.com (drive.google.com)|142.250.125.101|:443... connected.\n","HTTP request sent, awaiting response... 302 Moved Temporarily\n","Location: https://doc-08-ak-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/1ko43ibrsicomdb21ikf9jn86h4cume1/1636001175000/11118900490791463723/*/13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P [following]\n","Warning: wildcards not supported in HTTP.\n","--2021-11-04 04:47:07--  https://doc-08-ak-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/1ko43ibrsicomdb21ikf9jn86h4cume1/1636001175000/11118900490791463723/*/13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P\n","Resolving doc-08-ak-docs.googleusercontent.com (doc-08-ak-docs.googleusercontent.com)... 108.177.120.132, 2607:f8b0:4001:c18::84\n","Connecting to doc-08-ak-docs.googleusercontent.com (doc-08-ak-docs.googleusercontent.com)|108.177.120.132|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 127831 (125K) [text/csv]\n","Saving to: ‘/tmp/sentiment.csv’\n","\n","/tmp/sentiment.csv  100%[===================>] 124.83K  --.-KB/s    in 0.002s  \n","\n","2021-11-04 04:47:07 (70.1 MB/s) - ‘/tmp/sentiment.csv’ saved [127831/127831]\n","\n"]}]},{"cell_type":"code","metadata":{"id":"XuqER_KMD-xS"},"source":["import pandas as pd\n","\n","dataset = pd.read_csv('/tmp/sentiment.csv')\n","\n","# Extract out sentences and labels\n","sentences = dataset['text'].tolist()\n","labels = dataset['sentiment'].tolist()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Tbsx1T2CXPNO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636001232575,"user_tz":-540,"elapsed":254,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"4806c472-c392-4b41-cf2f-c5720f3b2b99"},"source":["# Print some example sentences and labels\n","for x in range(2):\n","  print(sentences[x])\n","  print(labels[x])\n","  print(\"\\n\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["So there is no way for me to plug it in here in the US unless I go by a converter.\n","0\n","\n","\n","Good case Excellent value.\n","1\n","\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"33AthPiALFZK"},"source":["#Create a subwords dataset\n","\n","We will use the Amazon and Yelp reviews dataset with tensorflow_datasets's SubwordTextEncoder functionality. \n","\n","SubwordTextEncoder.build_from_corpus() will create a tokenizer for us. You could also use this functionality to get subwords from a much larger corpus of text as well, but we'll just use our existing dataset here.\n","\n","We'll create a subword vocab_size of only the 1,000 most common subwords, as well as cutting off each subword to be at most 5 characters.\n","\n","Check out the related documentation for the the subword text encoder [here](https://www.tensorflow.org/datasets/api_docs/python/tfds/features/text/SubwordTextEncoder#build_from_corpus)."]},{"cell_type":"code","metadata":{"id":"6NaicNCcLYyf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636001309119,"user_tz":-540,"elapsed":4246,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"cbff0111-05ce-4a78-fa1b-24a0f4433d7e"},"source":["import tensorflow_datasets as tfds\n","\n","vocab_size = 1000\n","tokenizer = tfds.deprecated.text.SubwordTextEncoder.build_from_corpus(sentences, vocab_size, max_subword_length=5) # target_vocab_size: int, approximate size of the vocabulary to create.\n","\n","# How big is the vocab size?\n","print(\"Vocab size is \", tokenizer.vocab_size)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Vocab size is  999\n"]}]},{"cell_type":"code","metadata":{"id":"xvRVoeIVLevh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636001334834,"user_tz":-540,"elapsed":247,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"7b4eefc5-e2ad-46f8-efa0-d8ee1dc43810"},"source":["# Check that the tokenizer works appropriately\n","num = 5\n","print(sentences[num])\n","encoded = tokenizer.encode(sentences[num])\n","print(encoded)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["I have to jiggle the plug to get it to line up right to get decent volume.\n","[4, 31, 6, 849, 162, 450, 12, 1, 600, 438, 775, 6, 175, 14, 6, 55, 213, 159, 474, 775, 6, 175, 614, 380, 295, 148, 72, 789]\n"]}]},{"cell_type":"code","metadata":{"id":"G_vacTCifklV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636001336140,"user_tz":-540,"elapsed":3,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"ea7632e4-0000-41fd-9aed-031c99c513b5"},"source":["# Separately print out each subword, decoded\n","for i in encoded:\n","  print(tokenizer.decode([i]))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["I \n","have \n","to \n","j\n","ig\n","gl\n","e \n","the \n","pl\n","ug\n"," \n","to \n","get \n","it \n","to \n","li\n","ne \n","up \n","right\n"," \n","to \n","get \n","dec\n","ent \n","vo\n","lu\n","me\n",".\n"]}]},{"cell_type":"markdown","metadata":{"id":"cT528cptLupl"},"source":["## Replace sentence data with encoded subwords\n","\n","Now, we'll create the sequences to be used for training by actually encoding each of the individual sentences. This is equivalent to `text_to_sequences` with the `Tokenizer` we used in earlier exercises."]},{"cell_type":"code","metadata":{"id":"lkseMhxjL09F"},"source":["for i, sentence in enumerate(sentences):\n","  sentences[i] = tokenizer.encode(sentence)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"y21yRuzmL43U","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636001383382,"user_tz":-540,"elapsed":3,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"7a442db2-5f94-4a0e-9a7f-9ff33957c344"},"source":["# Check the sentences are appropriately replaced\n","print(sentences[5])"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[4, 31, 6, 849, 162, 450, 12, 1, 600, 438, 775, 6, 175, 14, 6, 55, 213, 159, 474, 775, 6, 175, 614, 380, 295, 148, 72, 789]\n"]}]},{"cell_type":"markdown","metadata":{"id":"8HrcPHESMBMs"},"source":["## Final pre-processing\n","\n","Before training, we still need to pad the sequences, as well as split into training and test sets."]},{"cell_type":"code","metadata":{"id":"50-hTsogLSL-"},"source":["import numpy as np\n","\n","max_length = 50\n","trunc_type='post'\n","padding_type='post'\n","\n","# Pad all sequences\n","sequences_padded = pad_sequences(sentences, maxlen=max_length, \n","                                 padding=padding_type, truncating=trunc_type)\n","\n","# Separate out the sentences and labels into training and test sets\n","training_size = int(len(sentences) * 0.8)\n","\n","training_sequences = sequences_padded[0:training_size]\n","testing_sequences = sequences_padded[training_size:]\n","training_labels = labels[0:training_size]\n","testing_labels = labels[training_size:]\n","\n","# Make labels into numpy arrays for use with the network later\n","training_labels_final = np.array(training_labels)\n","testing_labels_final = np.array(testing_labels)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PahZm7YEQ8EI"},"source":["# Create the model using an Embedding"]},{"cell_type":"code","metadata":{"id":"c_nyQeI0RCCv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636001390988,"user_tz":-540,"elapsed":5791,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"47f9d78c-4790-4c6e-c416-9793059a0227"},"source":["embedding_dim = 16\n","\n","model = tf.keras.Sequential([\n","    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n","    tf.keras.layers.GlobalAveragePooling1D(), \n","    tf.keras.layers.Dense(6, activation='relu'),\n","    tf.keras.layers.Dense(1, activation='sigmoid')\n","])\n","\n","model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 50, 16)            16000     \n","_________________________________________________________________\n","global_average_pooling1d (Gl (None, 16)                0         \n","_________________________________________________________________\n","dense (Dense)                (None, 6)                 102       \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 1)                 7         \n","=================================================================\n","Total params: 16,109\n","Trainable params: 16,109\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","metadata":{"id":"3WRXrx8BRO2L"},"source":["# Train the model"]},{"cell_type":"code","metadata":{"id":"oBKyVYvxRQ_9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636001412405,"user_tz":-540,"elapsed":21422,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"d0b843f0-d641-4246-a22d-46dc0a5d92aa"},"source":["num_epochs = 30\n","model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n","history = model.fit(training_sequences, training_labels_final, epochs=num_epochs, validation_data=(testing_sequences, testing_labels_final))\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","50/50 [==============================] - 4s 13ms/step - loss: 0.6927 - accuracy: 0.5129 - val_loss: 0.6948 - val_accuracy: 0.4110\n","Epoch 2/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6913 - accuracy: 0.5223 - val_loss: 0.6966 - val_accuracy: 0.4110\n","Epoch 3/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6882 - accuracy: 0.5323 - val_loss: 0.6959 - val_accuracy: 0.4311\n","Epoch 4/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.6811 - accuracy: 0.5725 - val_loss: 0.6839 - val_accuracy: 0.5865\n","Epoch 5/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6671 - accuracy: 0.6660 - val_loss: 0.6737 - val_accuracy: 0.6065\n","Epoch 6/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6460 - accuracy: 0.7345 - val_loss: 0.6600 - val_accuracy: 0.6266\n","Epoch 7/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6174 - accuracy: 0.7640 - val_loss: 0.6319 - val_accuracy: 0.7143\n","Epoch 8/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.5830 - accuracy: 0.7897 - val_loss: 0.6195 - val_accuracy: 0.6917\n","Epoch 9/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.5448 - accuracy: 0.8186 - val_loss: 0.5965 - val_accuracy: 0.6967\n","Epoch 10/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.5086 - accuracy: 0.8299 - val_loss: 0.5854 - val_accuracy: 0.6942\n","Epoch 11/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.4710 - accuracy: 0.8437 - val_loss: 0.5553 - val_accuracy: 0.7318\n","Epoch 12/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.4379 - accuracy: 0.8481 - val_loss: 0.5240 - val_accuracy: 0.7820\n","Epoch 13/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.4080 - accuracy: 0.8644 - val_loss: 0.5194 - val_accuracy: 0.7594\n","Epoch 14/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.3812 - accuracy: 0.8675 - val_loss: 0.5078 - val_accuracy: 0.7644\n","Epoch 15/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.3580 - accuracy: 0.8820 - val_loss: 0.5045 - val_accuracy: 0.7519\n","Epoch 16/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.3377 - accuracy: 0.8788 - val_loss: 0.5091 - val_accuracy: 0.7569\n","Epoch 17/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.3211 - accuracy: 0.8851 - val_loss: 0.4953 - val_accuracy: 0.7619\n","Epoch 18/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.3034 - accuracy: 0.8952 - val_loss: 0.5032 - val_accuracy: 0.7519\n","Epoch 19/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.2890 - accuracy: 0.9008 - val_loss: 0.5097 - val_accuracy: 0.7494\n","Epoch 20/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.2757 - accuracy: 0.9002 - val_loss: 0.5146 - val_accuracy: 0.7494\n","Epoch 21/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.2652 - accuracy: 0.9052 - val_loss: 0.5052 - val_accuracy: 0.7444\n","Epoch 22/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.2528 - accuracy: 0.9083 - val_loss: 0.5093 - val_accuracy: 0.7469\n","Epoch 23/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2427 - accuracy: 0.9146 - val_loss: 0.5070 - val_accuracy: 0.7694\n","Epoch 24/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.2330 - accuracy: 0.9190 - val_loss: 0.5336 - val_accuracy: 0.7494\n","Epoch 25/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.2243 - accuracy: 0.9222 - val_loss: 0.5312 - val_accuracy: 0.7444\n","Epoch 26/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2154 - accuracy: 0.9278 - val_loss: 0.5433 - val_accuracy: 0.7519\n","Epoch 27/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2080 - accuracy: 0.9266 - val_loss: 0.5550 - val_accuracy: 0.7444\n","Epoch 28/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.2007 - accuracy: 0.9335 - val_loss: 0.5587 - val_accuracy: 0.7419\n","Epoch 29/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.1933 - accuracy: 0.9391 - val_loss: 0.5627 - val_accuracy: 0.7469\n","Epoch 30/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.1872 - accuracy: 0.9385 - val_loss: 0.5657 - val_accuracy: 0.7519\n"]}]},{"cell_type":"markdown","metadata":{"id":"HhLPbUl2AZ0y"},"source":["# Plot the accuracy and loss"]},{"cell_type":"code","metadata":{"id":"jzBM1PpJAYfD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636001413066,"user_tz":-540,"elapsed":673,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"af4157fc-a5a5-46d0-aeee-28f31657e8f7"},"source":["import matplotlib.pyplot as plt\n","\n","\n","def plot_graphs(history, string):\n","  plt.plot(history.history[string])\n","  plt.plot(history.history['val_'+string])\n","  plt.xlabel(\"Epochs\")\n","  plt.ylabel(string)\n","  plt.legend([string, 'val_'+string])\n","  plt.show()\n","  \n","plot_graphs(history, \"accuracy\")\n","plot_graphs(history, \"loss\")"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Fwr5inBiWffb"},"source":["# Define a function to predict the sentiment of reviews\n","\n","We'll be creating models with some differences and will use each model to predict the sentiment of some new reviews.\n","\n","To save time, create a function that will take in a model and some new reviews, and print out the sentiment of each reviews.\n","\n","The higher the sentiment value is to 1, the more positive the review is."]},{"cell_type":"code","metadata":{"id":"aPNOYiiaha2y"},"source":["# Define a function to take a series of reviews\n","# and predict whether each one is a positive or negative review\n","\n","# max_length = 100 # previously defined\n","\n","def predict_review(model, new_sentences, maxlen=max_length, show_padded_sequence=True ):\n","  # Keep the original sentences so that we can keep using them later\n","  # Create an array to hold the encoded sequences\n","  new_sequences = []\n","\n","  # Convert the new reviews to sequences\n","  for i, frvw in enumerate(new_sentences):\n","    new_sequences.append(tokenizer.encode(frvw))\n","\n","  trunc_type='post' \n","  padding_type='post'\n","\n","  # Pad all sequences for the new reviews\n","  new_reviews_padded = pad_sequences(new_sequences, maxlen=max_length, \n","                                 padding=padding_type, truncating=trunc_type)             \n","\n","  classes = model.predict(new_reviews_padded)\n","\n","  # The closer the class is to 1, the more positive the review is\n","  for x in range(len(new_sentences)):\n","    \n","    # We can see the padded sequence if desired\n","    # Print the sequence\n","    if (show_padded_sequence):\n","      print(new_reviews_padded[x])\n","    # Print the review as text\n","    print(new_sentences[x])\n","    # Print its predicted class\n","    print(classes[x])\n","    print(\"\\n\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Qg-maex27KPW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636001413548,"user_tz":-540,"elapsed":488,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"29a9aef3-53c5-488d-f376-7bdadca15970"},"source":["# Use the model to predict some reviews   \n","fake_reviews = [\"I love this phone\", \n","                \"Everything was cold\",\n","                \"Everything was hot exactly as I wanted\", \n","                \"Everything was green\", \n","                \"the host seated us immediately\",\n","                \"they gave us free chocolate cake\", \n","                \"we couldn't hear each other talk because of the shouting in the kitchen\"\n","              ]\n","\n","predict_review(model, fake_reviews)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[  4 281  16  25   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","I love this phone\n","[0.85916036]\n","\n","\n","[812 227 864 100 775   9 525 843   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","Everything was cold\n","[0.10197621]\n","\n","\n","[812 227 864 100 775   9 109   8 333 731  24  61   4 171  59  77   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","Everything was hot exactly as I wanted\n","[0.24941288]\n","\n","\n","[812 227 864 100 775   9 157 359 853   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","Everything was green\n","[0.08112209]\n","\n","\n","[  1 109 228 540 237 635 241 423 340  89 298   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","the host seated us immediately\n","[0.33803192]\n","\n","\n","[154 242  47 635 341  12 569 547 147 319 775 125  85   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","they gave us free chocolate cake\n","[0.65233594]\n","\n","\n","[158 190 853 782   8 607 775 210 232 146 775 470  67 305 101  15   1 328\n"," 296  26  19   1 661 641 195   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","we couldn't hear each other talk because of the shouting in the kitchen\n","[0.01179719]\n","\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"ycJKbMq3K4iy"},"source":["# Define a function to train and show the results of models with different layers\n","\n","In the rest of this colab, we will define models, and then see the results. \n","\n","Define a function that will take the model, compile it, train it, graph the accuracy and loss, and then predict some results."]},{"cell_type":"code","metadata":{"id":"PevUcINXK3gn"},"source":["def fit_model_now (model, sentences) :\n","  model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n","  model.summary()\n","  history = model.fit(training_sequences, training_labels_final, epochs=num_epochs, \n","                      validation_data=(testing_sequences, testing_labels_final))\n","  return history\n","\n","def plot_results (history):\n","  plot_graphs(history, \"accuracy\")\n","  plot_graphs(history, \"loss\")\n","\n","def fit_model_and_show_results (model, sentences):\n","  history = fit_model_now(model, sentences)\n","  plot_results(history)\n","  predict_review(model, sentences)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"U13JBiJUG1oq"},"source":["# Add a bidirectional LSTM\n","\n","Create a new model that uses a bidirectional LSTM.\n","\n","Then use the function we have already defined to compile the model, train it, graph the accuracy and loss, then predict some results."]},{"cell_type":"code","metadata":{"id":"scTUsFPAG4zP","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1636001458443,"user_tz":-540,"elapsed":44426,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"8992cdd5-39f5-41e0-ee5b-c60e29294ab0"},"source":["# Define the model\n","model_bidi_lstm = tf.keras.Sequential([\n","    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n","    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(embedding_dim)), \n","    tf.keras.layers.Dense(6, activation='relu'), \n","    tf.keras.layers.Dense(1, activation='sigmoid')\n","])\n","\n","# Compile and train the model and then show the predictions for our extra sentences\n","fit_model_and_show_results(model_bidi_lstm, fake_reviews)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_1 (Embedding)      (None, 50, 16)            16000     \n","_________________________________________________________________\n","bidirectional (Bidirectional (None, 32)                4224      \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 6)                 198       \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 1)                 7         \n","=================================================================\n","Total params: 20,429\n","Trainable params: 20,429\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/30\n","50/50 [==============================] - 8s 41ms/step - loss: 0.6926 - accuracy: 0.5292 - val_loss: 0.6903 - val_accuracy: 0.6441\n","Epoch 2/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.6735 - accuracy: 0.6579 - val_loss: 0.6191 - val_accuracy: 0.7018\n","Epoch 3/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.5985 - accuracy: 0.7439 - val_loss: 0.5609 - val_accuracy: 0.7469\n","Epoch 4/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.4516 - accuracy: 0.8431 - val_loss: 0.5412 - val_accuracy: 0.7444\n","Epoch 5/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.3188 - accuracy: 0.8788 - val_loss: 0.5494 - val_accuracy: 0.7594\n","Epoch 6/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.2555 - accuracy: 0.9014 - val_loss: 0.5917 - val_accuracy: 0.7293\n","Epoch 7/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.2098 - accuracy: 0.9272 - val_loss: 0.6309 - val_accuracy: 0.7393\n","Epoch 8/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.1755 - accuracy: 0.9429 - val_loss: 0.6910 - val_accuracy: 0.7444\n","Epoch 9/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.1488 - accuracy: 0.9492 - val_loss: 0.7606 - val_accuracy: 0.7393\n","Epoch 10/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.1208 - accuracy: 0.9680 - val_loss: 0.7897 - val_accuracy: 0.7243\n","Epoch 11/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.1083 - accuracy: 0.9699 - val_loss: 0.8858 - val_accuracy: 0.7569\n","Epoch 12/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.0860 - accuracy: 0.9805 - val_loss: 0.9326 - val_accuracy: 0.7243\n","Epoch 13/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.0730 - accuracy: 0.9837 - val_loss: 0.9563 - val_accuracy: 0.7393\n","Epoch 14/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.0617 - accuracy: 0.9881 - val_loss: 1.0107 - val_accuracy: 0.7569\n","Epoch 15/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.0554 - accuracy: 0.9900 - val_loss: 1.0537 - val_accuracy: 0.7494\n","Epoch 16/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.0652 - accuracy: 0.9843 - val_loss: 1.1000 - val_accuracy: 0.7594\n","Epoch 17/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.0629 - accuracy: 0.9856 - val_loss: 1.1649 - val_accuracy: 0.7669\n","Epoch 18/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.0484 - accuracy: 0.9912 - val_loss: 1.1277 - val_accuracy: 0.7519\n","Epoch 19/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.0473 - accuracy: 0.9925 - val_loss: 1.2849 - val_accuracy: 0.7569\n","Epoch 20/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.0423 - accuracy: 0.9931 - val_loss: 1.1899 - val_accuracy: 0.7368\n","Epoch 21/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.0407 - accuracy: 0.9931 - val_loss: 1.3221 - val_accuracy: 0.7419\n","Epoch 22/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.0358 - accuracy: 0.9937 - val_loss: 1.3733 - val_accuracy: 0.7393\n","Epoch 23/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.0341 - accuracy: 0.9937 - val_loss: 1.4154 - val_accuracy: 0.7494\n","Epoch 24/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.0318 - accuracy: 0.9944 - val_loss: 1.4290 - val_accuracy: 0.7494\n","Epoch 25/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.0301 - accuracy: 0.9950 - val_loss: 1.4240 - val_accuracy: 0.7419\n","Epoch 26/30\n","50/50 [==============================] - 1s 23ms/step - loss: 0.0259 - accuracy: 0.9956 - val_loss: 1.4524 - val_accuracy: 0.7419\n","Epoch 27/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.0199 - accuracy: 0.9969 - val_loss: 1.6012 - val_accuracy: 0.7494\n","Epoch 28/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.0688 - accuracy: 0.9780 - val_loss: 1.3795 - val_accuracy: 0.7444\n","Epoch 29/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.0387 - accuracy: 0.9918 - val_loss: 1.2891 - val_accuracy: 0.7318\n","Epoch 30/30\n","50/50 [==============================] - 1s 24ms/step - loss: 0.0342 - accuracy: 0.9918 - val_loss: 1.3860 - val_accuracy: 0.7343\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["[  4 281  16  25   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","I love this phone\n","[0.99216425]\n","\n","\n","[812 227 864 100 775   9 525 843   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","Everything was cold\n","[0.00060992]\n","\n","\n","[812 227 864 100 775   9 109   8 333 731  24  61   4 171  59  77   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","Everything was hot exactly as I wanted\n","[0.98932856]\n","\n","\n","[812 227 864 100 775   9 157 359 853   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","Everything was green\n","[0.0666694]\n","\n","\n","[  1 109 228 540 237 635 241 423 340  89 298   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","the host seated us immediately\n","[0.99026906]\n","\n","\n","[154 242  47 635 341  12 569 547 147 319 775 125  85   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","they gave us free chocolate cake\n","[0.97927207]\n","\n","\n","[158 190 853 782   8 607 775 210 232 146 775 470  67 305 101  15   1 328\n"," 296  26  19   1 661 641 195   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","we couldn't hear each other talk because of the shouting in the kitchen\n","[8.5651334e-07]\n","\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"QsxKPbCnPJTj"},"source":["# Use multiple bidirectional layers\n","\n","Now let's see if we get any improvements from adding another Bidirectional LSTM layer to the model.\n","\n","Notice that the first Bidirectionl LSTM layer returns a sequence."]},{"cell_type":"code","metadata":{"id":"3N6Zul47PMED","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1636001550153,"user_tz":-540,"elapsed":91713,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"54c567a6-1d81-49ca-8983-81e4747392fb"},"source":["model_multiple_bidi_lstm = tf.keras.Sequential([\n","    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n","    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(embedding_dim, \n","                                                       return_sequences=True)), \n","    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(embedding_dim)),\n","    tf.keras.layers.Dense(6, activation='relu'),\n","    tf.keras.layers.Dense(1, activation='sigmoid')\n","])\n","\n","fit_model_and_show_results(model_multiple_bidi_lstm, fake_reviews)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_2 (Embedding)      (None, 50, 16)            16000     \n","_________________________________________________________________\n","bidirectional_1 (Bidirection (None, 50, 32)            4224      \n","_________________________________________________________________\n","bidirectional_2 (Bidirection (None, 32)                6272      \n","_________________________________________________________________\n","dense_4 (Dense)              (None, 6)                 198       \n","_________________________________________________________________\n","dense_5 (Dense)              (None, 1)                 7         \n","=================================================================\n","Total params: 26,701\n","Trainable params: 26,701\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/30\n","50/50 [==============================] - 11s 79ms/step - loss: 0.6891 - accuracy: 0.5191 - val_loss: 0.6969 - val_accuracy: 0.4110\n","Epoch 2/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.6396 - accuracy: 0.6227 - val_loss: 0.6398 - val_accuracy: 0.6942\n","Epoch 3/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.5013 - accuracy: 0.8368 - val_loss: 0.6278 - val_accuracy: 0.7393\n","Epoch 4/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.4298 - accuracy: 0.8832 - val_loss: 0.7723 - val_accuracy: 0.6967\n","Epoch 5/30\n","50/50 [==============================] - 2s 47ms/step - loss: 0.3802 - accuracy: 0.9046 - val_loss: 0.7187 - val_accuracy: 0.7494\n","Epoch 6/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.3535 - accuracy: 0.9272 - val_loss: 0.8555 - val_accuracy: 0.7193\n","Epoch 7/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.3441 - accuracy: 0.9215 - val_loss: 0.7243 - val_accuracy: 0.7368\n","Epoch 8/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.2924 - accuracy: 0.9303 - val_loss: 1.0099 - val_accuracy: 0.7368\n","Epoch 9/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1996 - accuracy: 0.9335 - val_loss: 0.8750 - val_accuracy: 0.7318\n","Epoch 10/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1764 - accuracy: 0.9454 - val_loss: 0.7850 - val_accuracy: 0.7569\n","Epoch 11/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1534 - accuracy: 0.9554 - val_loss: 0.9773 - val_accuracy: 0.7393\n","Epoch 12/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.1469 - accuracy: 0.9561 - val_loss: 0.8348 - val_accuracy: 0.7519\n","Epoch 13/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1373 - accuracy: 0.9598 - val_loss: 1.0188 - val_accuracy: 0.7469\n","Epoch 14/30\n","50/50 [==============================] - 2s 50ms/step - loss: 0.1227 - accuracy: 0.9674 - val_loss: 0.9694 - val_accuracy: 0.7444\n","Epoch 15/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.1132 - accuracy: 0.9699 - val_loss: 1.0419 - val_accuracy: 0.7393\n","Epoch 16/30\n","50/50 [==============================] - 2s 50ms/step - loss: 0.1068 - accuracy: 0.9724 - val_loss: 1.0896 - val_accuracy: 0.7419\n","Epoch 17/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1035 - accuracy: 0.9730 - val_loss: 1.1987 - val_accuracy: 0.7368\n","Epoch 18/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1028 - accuracy: 0.9730 - val_loss: 1.1986 - val_accuracy: 0.7393\n","Epoch 19/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1013 - accuracy: 0.9730 - val_loss: 1.1909 - val_accuracy: 0.7393\n","Epoch 20/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.0976 - accuracy: 0.9743 - val_loss: 1.2281 - val_accuracy: 0.7393\n","Epoch 21/30\n","50/50 [==============================] - 2s 50ms/step - loss: 0.0946 - accuracy: 0.9755 - val_loss: 1.3636 - val_accuracy: 0.7193\n","Epoch 22/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.1001 - accuracy: 0.9711 - val_loss: 1.1632 - val_accuracy: 0.7519\n","Epoch 23/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.1237 - accuracy: 0.9623 - val_loss: 1.1349 - val_accuracy: 0.7594\n","Epoch 24/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.1049 - accuracy: 0.9705 - val_loss: 1.1667 - val_accuracy: 0.7444\n","Epoch 25/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.0983 - accuracy: 0.9711 - val_loss: 1.1090 - val_accuracy: 0.7544\n","Epoch 26/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.0960 - accuracy: 0.9730 - val_loss: 1.2640 - val_accuracy: 0.7318\n","Epoch 27/30\n","50/50 [==============================] - 2s 48ms/step - loss: 0.0911 - accuracy: 0.9730 - val_loss: 1.1910 - val_accuracy: 0.7419\n","Epoch 28/30\n","50/50 [==============================] - 2s 50ms/step - loss: 0.0856 - accuracy: 0.9768 - val_loss: 1.1304 - val_accuracy: 0.7519\n","Epoch 29/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.0793 - accuracy: 0.9768 - val_loss: 1.2665 - val_accuracy: 0.7419\n","Epoch 30/30\n","50/50 [==============================] - 2s 49ms/step - loss: 0.0724 - accuracy: 0.9799 - val_loss: 1.3095 - val_accuracy: 0.7444\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["[  4 281  16  25   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","I love this phone\n","[0.99993575]\n","\n","\n","[812 227 864 100 775   9 525 843   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","Everything was cold\n","[0.02919296]\n","\n","\n","[812 227 864 100 775   9 109   8 333 731  24  61   4 171  59  77   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","Everything was hot exactly as I wanted\n","[0.9998481]\n","\n","\n","[812 227 864 100 775   9 157 359 853   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","Everything was green\n","[0.03340598]\n","\n","\n","[  1 109 228 540 237 635 241 423 340  89 298   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","the host seated us immediately\n","[0.03396876]\n","\n","\n","[154 242  47 635 341  12 569 547 147 319 775 125  85   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","they gave us free chocolate cake\n","[0.999151]\n","\n","\n","[158 190 853 782   8 607 775 210 232 146 775 470  67 305 101  15   1 328\n"," 296  26  19   1 661 641 195   0   0   0   0   0   0   0   0   0   0   0\n","   0   0   0   0   0   0   0   0   0   0   0   0   0   0]\n","we couldn't hear each other talk because of the shouting in the kitchen\n","[0.02578065]\n","\n","\n"]}]},{"cell_type":"markdown","metadata":{"id":"ABVYYPwba8Hx"},"source":["# Compare predictions for all the models\n","\n","It can be hard to see which model gives a better prediction for different reviews when you examine each model separately. So for comparison purposes, here we define some more reviews and print out the predictions that each of the three models gives for each review:\n","\n","*   Embeddings and a Global Average Pooling layer\n","*   Embeddings and a Bidirectional LSTM layer\n","*   Embeddings and two Bidirectional LSTM layers\n","\n","The results are not always what you might expect. The input dataset is fairly small, it has less than 2000 reviews. Some of the reviews are fairly short, and some of the short ones are fairly repetitive which reduces their impact on improving the  model, such as these two reviews:\n","\n","*   Bad Quality.\n","*   Low Quality.\n","\n","Feel free to add more reviews of your own, or change the reviews. The results will depend on the combination of words in the reviews, and how well they match to reviews in the training set. \n","\n","How do the different models handle things like \"wasn't good\" which contains a positive word (good) but is a poor review?\n"]},{"cell_type":"code","metadata":{"id":"6XebrXt0jtOy"},"source":["my_reviews =[\"lovely\", \"dreadful\", \"stay away\",\n","             \"everything was hot exactly as I wanted\",\n","             \"everything was not exactly as I wanted\",\n","             \"they gave us free chocolate cake\",\n","             \"I've never eaten anything so spicy in my life, my throat burned for hours\",\n","             \"for a phone that is as expensive as this one I expect it to be much easier to use than this thing is\",\n","             \"we left there very full for a low price so I'd say you just can't go wrong at this place\",\n","             \"that place does not have quality meals and it isn't a good place to go for dinner\",\n","             ]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tRWGjkJLkY2y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636001550154,"user_tz":-540,"elapsed":9,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"1e4200e1-d6e7-4a62-dd71-a8e9dfa97682"},"source":["print(\"===================================\\n\",\"Embeddings only:\\n\", \"===================================\",)\n","predict_review(model, my_reviews, show_padded_sequence=False)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["===================================\n"," Embeddings only:\n"," ===================================\n","lovely\n","[0.8814331]\n","\n","\n","dreadful\n","[0.28970364]\n","\n","\n","stay away\n","[0.59992117]\n","\n","\n","everything was hot exactly as I wanted\n","[0.6705868]\n","\n","\n","everything was not exactly as I wanted\n","[0.4427362]\n","\n","\n","they gave us free chocolate cake\n","[0.65233594]\n","\n","\n","I've never eaten anything so spicy in my life, my throat burned for hours\n","[0.02289614]\n","\n","\n","for a phone that is as expensive as this one I expect it to be much easier to use than this thing is\n","[0.5735674]\n","\n","\n","we left there very full for a low price so I'd say you just can't go wrong at this place\n","[0.7907588]\n","\n","\n","that place does not have quality meals and it isn't a good place to go for dinner\n","[0.82591486]\n","\n","\n"]}]},{"cell_type":"code","metadata":{"id":"G2FJR3IVBt30","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636001550154,"user_tz":-540,"elapsed":6,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"47984688-44e0-44d7-b17d-cb99a2e71547"},"source":["print(\"===================================\\n\", \"With a single bidirectional LSTM:\\n\", \"===================================\")\n","predict_review(model_bidi_lstm, my_reviews, show_padded_sequence=False)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["===================================\n"," With a single bidirectional LSTM:\n"," ===================================\n","lovely\n","[0.9907478]\n","\n","\n","dreadful\n","[0.00114239]\n","\n","\n","stay away\n","[0.72503406]\n","\n","\n","everything was hot exactly as I wanted\n","[0.9923511]\n","\n","\n","everything was not exactly as I wanted\n","[0.98897386]\n","\n","\n","they gave us free chocolate cake\n","[0.97927207]\n","\n","\n","I've never eaten anything so spicy in my life, my throat burned for hours\n","[0.00150611]\n","\n","\n","for a phone that is as expensive as this one I expect it to be much easier to use than this thing is\n","[0.9321205]\n","\n","\n","we left there very full for a low price so I'd say you just can't go wrong at this place\n","[0.8687498]\n","\n","\n","that place does not have quality meals and it isn't a good place to go for dinner\n","[0.9690551]\n","\n","\n"]}]},{"cell_type":"code","metadata":{"id":"81v1r3Y2BwvC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636001550642,"user_tz":-540,"elapsed":5,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"893ddb72-e9a4-4870-abbf-365f35444d9f"},"source":["print(\"===================================\\n\",\"With two bidirectional LSTMs:\\n\", \"===================================\")\n","predict_review(model_multiple_bidi_lstm, my_reviews, show_padded_sequence=False)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["===================================\n"," With two bidirectional LSTMs:\n"," ===================================\n","lovely\n","[0.99994004]\n","\n","\n","dreadful\n","[0.03465385]\n","\n","\n","stay away\n","[0.6773244]\n","\n","\n","everything was hot exactly as I wanted\n","[0.99995506]\n","\n","\n","everything was not exactly as I wanted\n","[0.99947876]\n","\n","\n","they gave us free chocolate cake\n","[0.999151]\n","\n","\n","I've never eaten anything so spicy in my life, my throat burned for hours\n","[0.02467616]\n","\n","\n","for a phone that is as expensive as this one I expect it to be much easier to use than this thing is\n","[0.03280785]\n","\n","\n","we left there very full for a low price so I'd say you just can't go wrong at this place\n","[0.03041444]\n","\n","\n","that place does not have quality meals and it isn't a good place to go for dinner\n","[0.02552534]\n","\n","\n"]}]}]}