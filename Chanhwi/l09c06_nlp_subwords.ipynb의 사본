{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"l09c06_nlp_subwords.ipynb의 사본","provenance":[{"file_id":"https://github.com/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l09c06_nlp_subwords.ipynb","timestamp":1635941194269}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"punL79CN7Ox6"},"source":["##### Copyright 2020 The TensorFlow Authors."]},{"cell_type":"code","metadata":{"cellView":"form","id":"_ckMIh7O7s6D"},"source":["#@title Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","# https://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"CH5gnvxl-N3U"},"source":["# What's in a (sub)word?"]},{"cell_type":"markdown","metadata":{"id":"S5Uhzt6vVIB2"},"source":["<table class=\"tfo-notebook-buttons\" align=\"left\">\n","  <td>\n","    <a target=\"_blank\" href=\"https://colab.research.google.com/github/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l09c06_nlp_subwords.ipynb\"><img src=\"https://www.tensorflow.org/images/colab_logo_32px.png\" />Run in Google Colab</a>\n","  </td>\n","  <td>\n","    <a target=\"_blank\" href=\"https://github.com/tensorflow/examples/blob/master/courses/udacity_intro_to_tensorflow_for_deep_learning/l09c06_nlp_subwords.ipynb\"><img src=\"https://www.tensorflow.org/images/GitHub-Mark-32px.png\" />View source on GitHub</a>\n","  </td>\n","</table>"]},{"cell_type":"markdown","metadata":{"id":"ykxAKKa1Dl0s"},"source":["In this colab, we'll work with subwords, or words made up of the pieces of larger words, and see how that impacts our network and related embeddings."]},{"cell_type":"markdown","metadata":{"id":"QQCr_NAT-g5w"},"source":["## Import TensorFlow and related functions"]},{"cell_type":"code","metadata":{"id":"Q8Wa_ZlX-mPH","executionInfo":{"status":"ok","timestamp":1635941249658,"user_tz":-540,"elapsed":3536,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}}},"source":["import tensorflow as tf\n","\n","from tensorflow.keras.preprocessing.sequence import pad_sequences"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MRHk-4Te-yLJ"},"source":["## Get the original dataset\n","\n","We'll once again use the dataset containing Amazon and Yelp reviews. This dataset was originally extracted from [here](https://www.kaggle.com/marklvl/sentiment-labelled-sentences-data-set)."]},{"cell_type":"code","metadata":{"id":"XJAxrOLi-02C","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635941250397,"user_tz":-540,"elapsed":745,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"b8767f82-4ddc-4844-abe9-78acfef8c6e3"},"source":["!wget --no-check-certificate \\\n","    https://drive.google.com/uc?id=13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P \\\n","    -O /tmp/sentiment.csv"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["--2021-11-03 12:07:29--  https://drive.google.com/uc?id=13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P\n","Resolving drive.google.com (drive.google.com)... 108.177.121.100, 108.177.121.102, 108.177.121.138, ...\n","Connecting to drive.google.com (drive.google.com)|108.177.121.100|:443... connected.\n","HTTP request sent, awaiting response... 302 Moved Temporarily\n","Location: https://doc-08-ak-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/ke9e5313d2girhsmlmh0c1pm5uvrotu1/1635941175000/11118900490791463723/*/13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P [following]\n","Warning: wildcards not supported in HTTP.\n","--2021-11-03 12:07:29--  https://doc-08-ak-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/ke9e5313d2girhsmlmh0c1pm5uvrotu1/1635941175000/11118900490791463723/*/13ySLC_ue6Umt9RJYSeM2t-V0kCv-4C-P\n","Resolving doc-08-ak-docs.googleusercontent.com (doc-08-ak-docs.googleusercontent.com)... 108.177.112.132, 2607:f8b0:4001:c12::84\n","Connecting to doc-08-ak-docs.googleusercontent.com (doc-08-ak-docs.googleusercontent.com)|108.177.112.132|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 127831 (125K) [text/csv]\n","Saving to: ‘/tmp/sentiment.csv’\n","\n","/tmp/sentiment.csv  100%[===================>] 124.83K  --.-KB/s    in 0.002s  \n","\n","2021-11-03 12:07:29 (55.0 MB/s) - ‘/tmp/sentiment.csv’ saved [127831/127831]\n","\n"]}]},{"cell_type":"code","metadata":{"id":"Dr-EDUKP_HBl","executionInfo":{"status":"ok","timestamp":1635941250398,"user_tz":-540,"elapsed":5,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}}},"source":["import pandas as pd\n","\n","dataset = pd.read_csv('/tmp/sentiment.csv')\n","\n","# Just extract out sentences and labels first - we will create subwords here\n","sentences = dataset['text'].tolist()\n","labels = dataset['sentiment'].tolist()"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8zut9Wng_R3B"},"source":["## Create a subwords dataset\n","\n","We can use the existing Amazon and Yelp reviews dataset with `tensorflow_datasets`'s `SubwordTextEncoder` functionality. `SubwordTextEncoder.build_from_corpus()` will create a tokenizer for us. You could also use this functionality to get subwords from a much larger corpus of text as well, but we'll just use our existing dataset here.\n","\n","The Amazon and Yelp dataset we are using isn't super large, so we'll create a subword `vocab_size` of only the 1,000 most common words, as well as cutting off each subword to be at most 5 characters.\n","\n","Check out the related documentation [here](https://www.tensorflow.org/datasets/api_docs/python/tfds/features/text/SubwordTextEncoder#build_from_corpus)."]},{"cell_type":"code","metadata":{"id":"aElsgxia_43g","executionInfo":{"status":"ok","timestamp":1635941255077,"user_tz":-540,"elapsed":4683,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}}},"source":["import tensorflow_datasets as tfds\n","\n","vocab_size = 1000\n","tokenizer = tfds.deprecated.text.SubwordTextEncoder.build_from_corpus(sentences, vocab_size, max_subword_length=5)"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"0XNZWGKqBDc3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635941255079,"user_tz":-540,"elapsed":18,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"3442e216-40ce-4e22-ffa8-1f29edf51a35"},"source":["# Check that the tokenizer works appropriately\n","num = 5\n","print(sentences[num])\n","encoded = tokenizer.encode(sentences[num])\n","print(encoded)\n","# Separately print out each subword, decoded\n","for i in encoded:\n","  print(tokenizer.decode([i]))"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["I have to jiggle the plug to get it to line up right to get decent volume.\n","[4, 31, 6, 849, 162, 450, 12, 1, 600, 438, 775, 6, 175, 14, 6, 55, 213, 159, 474, 775, 6, 175, 614, 380, 295, 148, 72, 789]\n","I \n","have \n","to \n","j\n","ig\n","gl\n","e \n","the \n","pl\n","ug\n"," \n","to \n","get \n","it \n","to \n","li\n","ne \n","up \n","right\n"," \n","to \n","get \n","dec\n","ent \n","vo\n","lu\n","me\n",".\n"]}]},{"cell_type":"markdown","metadata":{"id":"gYnbqctXGKcC"},"source":["## Replace sentence data with encoded subwords\n","\n","Now, we'll re-create the dataset to be used for training by actually encoding each of the individual sentences. This is equivalent to `text_to_sequences` with the `Tokenizer` we used in earlier exercises."]},{"cell_type":"code","metadata":{"id":"rAmql34aGfeV","executionInfo":{"status":"ok","timestamp":1635941255079,"user_tz":-540,"elapsed":12,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}}},"source":["for i, sentence in enumerate(sentences):\n","  sentences[i] = tokenizer.encode(sentence)"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"jNnee_csG5Iz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635941255080,"user_tz":-540,"elapsed":12,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"a9c33efa-e0ca-4f5b-d5a1-7b7838319610"},"source":["# Check the sentences are appropriately replaced\n","print(sentences[1])"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["[625, 677, 626, 274, 380, 633, 148, 844, 789]\n"]}]},{"cell_type":"markdown","metadata":{"id":"zpIigjecHVkF"},"source":["## Final pre-processing\n","\n","Before training, we still need to pad the sequences, as well as split into training and test sets."]},{"cell_type":"code","metadata":{"id":"INIFSAcEHool","executionInfo":{"status":"ok","timestamp":1635941255487,"user_tz":-540,"elapsed":415,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}}},"source":["import numpy as np\n","\n","max_length = 50\n","trunc_type='post'\n","padding_type='post'\n","\n","# Pad all sentences\n","sentences_padded = pad_sequences(sentences, maxlen=max_length, \n","                                 padding=padding_type, truncating=trunc_type)\n","\n","# Separate out the sentences and labels into training and test sets\n","training_size = int(len(sentences) * 0.8)\n","\n","training_sentences = sentences_padded[0:training_size]\n","testing_sentences = sentences_padded[training_size:]\n","training_labels = labels[0:training_size]\n","testing_labels = labels[training_size:]\n","\n","# Make labels into numpy arrays for use with the network later\n","training_labels_final = np.array(training_labels)\n","testing_labels_final = np.array(testing_labels)"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QC9A-sTpPPiL"},"source":["## Train a Sentiment Model"]},{"cell_type":"code","metadata":{"id":"eDKcL64IPcfy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1635941260956,"user_tz":-540,"elapsed":5475,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"1dd309c8-eb8c-4d15-e365-4d2719535091"},"source":["embedding_dim = 16\n","model = tf.keras.Sequential([\n","    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n","    tf.keras.layers.GlobalAveragePooling1D(),\n","    tf.keras.layers.Dense(6, activation='relu'),\n","    tf.keras.layers.Dense(1, activation='sigmoid')\n","])\n","\n","model.summary()"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 50, 16)            16000     \n","_________________________________________________________________\n","global_average_pooling1d (Gl (None, 16)                0         \n","_________________________________________________________________\n","dense (Dense)                (None, 6)                 102       \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 1)                 7         \n","=================================================================\n","Total params: 16,109\n","Trainable params: 16,109\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"id":"VqkMNtIeP3oz","colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"status":"ok","timestamp":1635941282538,"user_tz":-540,"elapsed":21587,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"34ea1ccc-9a69-413e-faa6-b58cd315ce31"},"source":["num_epochs = 30\n","model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n","history = model.fit(training_sentences, training_labels_final, epochs=num_epochs, \n","                    validation_data=(testing_sentences, testing_labels_final))"],"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","50/50 [==============================] - 4s 11ms/step - loss: 0.6929 - accuracy: 0.5204 - val_loss: 0.6933 - val_accuracy: 0.4236\n","Epoch 2/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6909 - accuracy: 0.5763 - val_loss: 0.6913 - val_accuracy: 0.5890\n","Epoch 3/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6876 - accuracy: 0.6786 - val_loss: 0.6897 - val_accuracy: 0.5188\n","Epoch 4/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.6801 - accuracy: 0.6736 - val_loss: 0.6842 - val_accuracy: 0.5539\n","Epoch 5/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.6652 - accuracy: 0.7081 - val_loss: 0.6725 - val_accuracy: 0.6115\n","Epoch 6/30\n","50/50 [==============================] - 0s 8ms/step - loss: 0.6410 - accuracy: 0.7389 - val_loss: 0.6472 - val_accuracy: 0.6992\n","Epoch 7/30\n","50/50 [==============================] - 0s 10ms/step - loss: 0.6071 - accuracy: 0.7790 - val_loss: 0.6265 - val_accuracy: 0.7043\n","Epoch 8/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.5657 - accuracy: 0.8067 - val_loss: 0.5947 - val_accuracy: 0.7494\n","Epoch 9/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.5218 - accuracy: 0.8299 - val_loss: 0.5717 - val_accuracy: 0.7469\n","Epoch 10/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.4784 - accuracy: 0.8355 - val_loss: 0.5432 - val_accuracy: 0.7794\n","Epoch 11/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.4419 - accuracy: 0.8537 - val_loss: 0.5309 - val_accuracy: 0.7519\n","Epoch 12/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.4064 - accuracy: 0.8613 - val_loss: 0.5329 - val_accuracy: 0.7368\n","Epoch 13/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.3768 - accuracy: 0.8707 - val_loss: 0.5194 - val_accuracy: 0.7469\n","Epoch 14/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.3525 - accuracy: 0.8738 - val_loss: 0.5033 - val_accuracy: 0.7519\n","Epoch 15/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.3293 - accuracy: 0.8839 - val_loss: 0.5131 - val_accuracy: 0.7469\n","Epoch 16/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.3095 - accuracy: 0.8927 - val_loss: 0.4982 - val_accuracy: 0.7569\n","Epoch 17/30\n","50/50 [==============================] - 0s 6ms/step - loss: 0.2921 - accuracy: 0.8927 - val_loss: 0.5202 - val_accuracy: 0.7494\n","Epoch 18/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2793 - accuracy: 0.9040 - val_loss: 0.5201 - val_accuracy: 0.7519\n","Epoch 19/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2643 - accuracy: 0.9083 - val_loss: 0.5101 - val_accuracy: 0.7544\n","Epoch 20/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2516 - accuracy: 0.9096 - val_loss: 0.5456 - val_accuracy: 0.7494\n","Epoch 21/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2401 - accuracy: 0.9159 - val_loss: 0.5182 - val_accuracy: 0.7494\n","Epoch 22/30\n","50/50 [==============================] - 0s 8ms/step - loss: 0.2293 - accuracy: 0.9215 - val_loss: 0.5297 - val_accuracy: 0.7469\n","Epoch 23/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2205 - accuracy: 0.9222 - val_loss: 0.5290 - val_accuracy: 0.7544\n","Epoch 24/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2113 - accuracy: 0.9278 - val_loss: 0.5374 - val_accuracy: 0.7469\n","Epoch 25/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.2045 - accuracy: 0.9266 - val_loss: 0.5439 - val_accuracy: 0.7519\n","Epoch 26/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.1967 - accuracy: 0.9316 - val_loss: 0.5637 - val_accuracy: 0.7419\n","Epoch 27/30\n","50/50 [==============================] - 0s 8ms/step - loss: 0.1894 - accuracy: 0.9335 - val_loss: 0.5612 - val_accuracy: 0.7494\n","Epoch 28/30\n","50/50 [==============================] - 0s 8ms/step - loss: 0.1806 - accuracy: 0.9448 - val_loss: 0.5785 - val_accuracy: 0.7494\n","Epoch 29/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.1744 - accuracy: 0.9479 - val_loss: 0.5968 - val_accuracy: 0.7494\n","Epoch 30/30\n","50/50 [==============================] - 0s 7ms/step - loss: 0.1684 - accuracy: 0.9485 - val_loss: 0.5920 - val_accuracy: 0.7469\n"]}]},{"cell_type":"markdown","metadata":{"id":"sj18M42kQkCi"},"source":["## Visualize the Training Graph\n","\n","We can visualize the training graph below again. Does there appear to be a difference in how validation accuracy and loss is trending compared to with full words?"]},{"cell_type":"code","metadata":{"id":"uy8KIMPIQlvH","colab":{"base_uri":"https://localhost:8080/","height":541},"executionInfo":{"status":"ok","timestamp":1635941283071,"user_tz":-540,"elapsed":544,"user":{"displayName":"정찬휘","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06853102929161356417"}},"outputId":"57393d25-a8bb-417f-cec8-3411d6b53121"},"source":["import matplotlib.pyplot as plt\n","\n","\n","def plot_graphs(history, string):\n","  plt.plot(history.history[string])\n","  plt.plot(history.history['val_'+string])\n","  plt.xlabel(\"Epochs\")\n","  plt.ylabel(string)\n","  plt.legend([string, 'val_'+string])\n","  plt.show()\n","  \n","plot_graphs(history, \"accuracy\")\n","plot_graphs(history, \"loss\")"],"execution_count":11,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"_m7QzouQQ1Rs"},"source":["## Get files for visualizing the network\n","\n","Once again, you can visualize the sentiment related to all of the subwords using the below code and by heading to http://projector.tensorflow.org/ to upload and view the data.\n","\n","Note that the below code does have a few small changes to handle the different way text is encoded in our dataset compared to before with the built in `Tokenizer`.\n","\n","You may get an error like \"Number of tensors (999) do not match the number of lines in metadata (992).\" As long as you load the vectors first without error and wait a few seconds after this pops up, you will be able to click outside the file load menu and still view the visualization."]},{"cell_type":"code","metadata":{"id":"dezs4wE5RMQu"},"source":["# First get the weights of the embedding layer\n","e = model.layers[0]\n","weights = e.get_weights()[0]\n","print(weights.shape) # shape: (vocab_size, embedding_dim)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LXKqy9Z1RSmt"},"source":["import io\n","\n","# Write out the embedding vectors and metadata\n","out_v = io.open('vecs.tsv', 'w', encoding='utf-8')\n","out_m = io.open('meta.tsv', 'w', encoding='utf-8')\n","for word_num in range(0, vocab_size - 1):\n","  word = tokenizer.decode([word_num])\n","  embeddings = weights[word_num]\n","  out_m.write(word + \"\\n\")\n","  out_v.write('\\t'.join([str(x) for x in embeddings]) + \"\\n\")\n","out_v.close()\n","out_m.close()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"v04wBMybRoGx"},"source":["# Download the files\n","try:\n","  from google.colab import files\n","except ImportError:\n","  pass\n","else:\n","  files.download('vecs.tsv')\n","  files.download('meta.tsv')"],"execution_count":null,"outputs":[]}]}